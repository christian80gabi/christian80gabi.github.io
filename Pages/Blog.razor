@page "/blog"
@using christian80gabi.github.io.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1 class="mb-3">Blog Posts</h1>

@if (_posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var post in _posts)
        {
            <div class="col">
                <div class="card h-100" @onclick="@(() => NavigateToPost(post))">
                    <img src="@post.Cover" class="card-img-top m-1" alt="Post-Image">
                    <div class="card-body">
                        <h5 class="card-title">@post.Title</h5>
                        <p class="card-text">@foreach(var tag in @post.Tags) { <span class="badge text-bg-light m-2"><code>@tag</code></span> }</p>
                    </div>
                    <div class="card-footer">
                        <small class="text-body-secondary fst-italic">@post.Date.ToLongDateString()</small>
                    </div>
                </div>
            </div>
        }
    </div>
}

<footer class="footer mt-auto py-3 bg-body-tertiary">
    <SocialMedia />
</footer>


@code {
    private List<Post>? _posts = Post.Posts;

    protected override async Task OnInitializedAsync()
    {
        _posts = await Http.GetFromJsonAsync<List<Post>>("data/posts.json");
        Post.Posts = _posts ?? Post.Posts;
        
        foreach (var post in Post.Posts)
        {
            try
            {
                post.MarkdownContent = await Http.GetStringAsync(post.MarkdownFile);
            }
            catch (Exception)
            {
                // ignored
            }
        }
    }

    private void NavigateToPost(Post post)
    {
        NavigationManager.NavigateTo($"/post/{post.Id}");
    }
}
